Materials and Methods Script Our script, rg3m, is available on github: https://github.com/apodgorny1/rg3m. The script is in stock Python, such that it would be compatible with Python2 and Python3; it should run with the default library packages provided at installation. This obviates the need for any new libraries or their dependencies to be installed. Additionally, the code was written in an easy-to-understand way to allow modification to fit special use cases by users with little programming background. As there is variation in the gene database files available online, the most common headers were used for column inference allowing for flexibility of sources. This may be updated easily as required. Algorithm Complexity As the core flow requires a loop over the entire set of the resistance genes, R, over each of the SM genes, S, the worst-case runtime complexity is O(RS). Memory complexity is the same, as both must be stored in memory simultaneously. If the homolog search is active, R is searched for each successful hit. In a case where every R is a hit, we add an O(R2) to the complexity. Homolog uniqueness is enforced by converting the final homolog list to a set. Pseudocode Let: R be the set of resistance genes, S be the set of SM genes, C be the cutoff distance between gene centers, and M be the maximum gene length cutoff. Start: Generate R from resistance gene database, eliminating singletons if specified in parameters. Generate S from SM gene database For each r_gene in R: For each s_gene in S: Check if r_gene and s_gene are on the same organism. Check if r_gene and s_gene are on the same scaffold. Check if r_gene's and s_gene's centers are ⇐ to C nucleotides apart Check that r_gene and s_gene do not overlap Check that the resistance gene length is ⇐ to M If all above criteria met: Output to terminal and csv if specified. Output resistance gene homologs if specified. If homolog mode active: Add all from R with the same organism to homolog table H. End s_gene loop End r_gene loop Complete Genomic Data Genomic data were obtained from the JGI MycoCosm database. Following the precedent of Reynolds et al. (2017), when a genome from MycoCosm had not been published and no special permission from the author(s) could be obtained, we referred to the genome only by taxonomic class and an assigned number. The data in the supplemental spreadsheets of this manuscript are based on pairwise BLASTP alignments using the default algorithm parameters for NCBI's online tool. Predicted protein amino acid lengths reported in this paper include the translation stop codon. At times, we used NCBI conserved domain searches and various NCBI BLAST search variations to gain additional understanding of some of the proteins under study. We also used the T-Coffee webserver (Di Tommaso et al., 2011) at http://tcoffee.crg.cat to create and analyze multiple sequence alignments (MSAs) of DNA and amino acid sequences to gain additional understanding of some of the DNA sequences and proteins under study.